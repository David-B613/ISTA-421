using System;

using System.Collections.Generic;

using System.IO;

using System.Linq;

using System.Threading.Tasks;

using Microsoft.AspNetCore;

using Microsoft.AspNetCore.Hosting;

using Microsoft.Extensions.Configuration;

using Microsoft.Extensions.Logging;

 

namespace Test10

{

    public class Program

    {

        public static void Main(string[] args)

        {

            CreateWebHostBuilder(args).Build().Run();

        }

 

        public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>

            WebHost.CreateDefaultBuilder(args)

                .UseStartup<Startup>();

    }

}

__________________________________________________________________________________________________________________

using System;

using System.Collections.Generic;

using System.Linq;

using System.Threading.Tasks;

using Microsoft.AspNetCore.Builder;

using Microsoft.AspNetCore.Hosting;

using Microsoft.AspNetCore.Http;

using Microsoft.Extensions.DependencyInjection;

 

namespace Test10

{

    public class Startup

    {

        // This method gets called by the runtime. Use this method to add services to the container.

        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940

        public void ConfigureServices(IServiceCollection services)

        {

            services.AddMvc();

        }

 

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.

        public void Configure(IApplicationBuilder app, IHostingEnvironment env)

        {

            if (env.IsDevelopment())

            {

                app.UseDeveloperExceptionPage();

            }

 

            //app.Run(async (context) =>

            //{

            //    await context.Response.WriteAsync("Hello World!");

            //});

 

            app.UseMvcWithDefaultRoute();

        }

    }
______________________________________________________________________________________________________________________________________________________
using System;

using System.Collections.Generic;

using System.Linq;

using System.Threading.Tasks;

 

namespace Test10.Model

{

    public class Me

    {

        public string Name { get; set; }

        public string HowWeMet { get; set; }

        public Myself Related { get; set; }

        public static Me[] GetMe()

        {

            Me Wife = new Me

            {

                Name = "Alina",

                HowWeMet = "Work gathering"

            };

            Myself Bestfriend1 = new Me

            {

                Name = "Todd"

                HowWeMet = "Grew up together in the same neighborhood."

            };

            Myself Bestfriend2 = new Myself

            {

                Name = "James",

                HowWeMet = "Tank Ramp he said you the new guy. I responded, he said good you washed a car before, I reponded. he responded good go wash the tank."

            };

            Myself Bestfriend3 = new Me

            {

                Name = "John",

                HowWeMet = "Met at work."

            };

            Wife.Related = Bestfriend1;

            return new Myself[] { Wife, Bestfriend1, Bestfriend2, Bestfriend3, null };

 

 

        }



 

 

    }

 

}
}

______________________________________________________________________________________________________________________________________________________________________

using System;

using System.Collections.Generic;

using System.Linq;

using System.Threading.Tasks;

using Microsoft.AspNetCore.Mvc;

using Test10.Model;

//using System.Collections.Generic;

//using LanguageFeatures.Models;

 

namespace Test10.Controllers

{

    public class HomeController : Controller

    {

        public ViewResult Index()

        {

            List<string> results = new List<String>();

            foreach (Myself g in Me.GetMe())

            {

                string Name = g?.Name;

                string HowWeMet = g?.HowWeMet;

                //string relatedName = g?.Related.Name;

 

                results.Add(string.Format("Name of Bestfriends: {0}, How We Met: {1}",

                    Name, HowWeMet));

            }

            return View(results);

        }

    }

}